<div>
    <div class="precanvas-wrapper">
        <button type="button" id="start-button">Запуск!</button>
        <p id="status"></p>
    </div>
    <div class="canvas-wrapper">
        <canvas id="canvas"></canvas>
    </div>
</div>

<script type="text/javascript">
    const gameLog = `{{ solution.logs }}`.split('\n')
// const gameLog =
// `setup 7
// .......
// .#.#.#.
// .......
// .#####.
// .......
// .#.#.#.
// .......
// data 3
// 6 0 down
// 0 6 up
// 0
// data 3
// 0 6 up
// 6 0 left
// 0
// data 4
// 6 0 left
// 0 6 up
// 1
// 0 5 up
// data 4
// 0 6 up
// 5 0 left
// 1
// 0 5 up
// data 4
// 5 0 left
// 0 5 up
// 1
// 0 4 up
// data 4
// 0 5 up
// 4 0 left
// 1
// 0 4 up
// data 4
// 4 0 left
// 0 4 up
// 1
// 0 3 up
// data 4
// 0 4 up
// 3 0 left
// 1
// 0 3 up
// data 4
// 3 0 left
// 0 3 up
// 1
// 0 2 up
// data 4
// 0 3 up
// 2 0 left
// 1
// 0 2 up
// data 4
// 2 0 left
// 0 2 up
// 1
// 0 1 up
// data 4
// 0 2 up
// 1 0 left
// 1
// 0 1 up
// data 4
// 1 0 left
// 0 1 up
// 1
// 0 0 up
// data 4
// 0 1 up
// 0 0 left
// 1
// 0 0 up
// data 3
// 0 0 left
// 0 2 up
// 0
// data 4
// 0 2 up
// 0 0 left
// 1
// 0 0 left
// data 3
// 0 0 left
// 0 3 up
// 0
// data 3
// 0 3 up
// 0 0 left
// 0
// data 3
// 0 0 left
// 0 2 up
// 0
// data 4
// 0 2 up
// 0 0 left
// 1
// 0 0 left
// data 3
// 0 0 left
// 0 3 up
// 0
// data 3
// 0 3 up
// 0 0 down
// 0
// data 3
// 0 0 down
// 0 3 left
// 0
// data 3
// 0 3 left
// 0 0 right
// 0
// data 3
// 0 0 right
// 0 3 down
// 0
// data 3
// 0 3 down
// 0 0 up
// 0
// data 3
// 0 0 up
// 0 3 right
// 0
// data 3
// 0 3 right
// 0 0 left
// 0
// data 3
// 0 0 left
// 0 3 up
// 0
// data 3
// 0 3 up
// 0 0 down
// 0
// data 4
// 0 0 down
// 0 3 up
// 1
// 0 2 up
// data 4
// 0 3 up
// 0 1 down
// 1
// 0 2 up
// win 2
// `.split('\n')

    function readLine() {
        if (__readLineIndexer < gameLog.length) {
            return gameLog[__readLineIndexer++]
        }
        return ""
    }

    __readLineIndexer = 0
    var cnv = document.getElementById("canvas")
    var ctx = cnv.getContext("2d")

    const cellsVer = Number(readLine().split(' ')[1])
    const field = []

    for (i = 0; i < cellsVer; i++) {
        field.push(readLine())
    }
    const cellsHor = field[0].length

    cnv.width = 400
    cnv.height = 400

    cnv.width += cellsHor - (cnv.width % cellsHor)
    cnv.height += cellsVer - (cnv.height % cellsVer)
    const cellSize = Math.floor(Math.min(cnv.width / cellsHor, cnv.height / cellsVer))

    ctx.fillStyle = "black"
    ctx.fillRect(0, 0, cnv.width, cnv.height)

    document.getElementById("status").innerText = ""

    function getCoords(r, c) {
        return [r * cellSize, c * cellSize]
    }

    function drawWall(r, c) {
        [x, y] = getCoords(r, c)
        ctx.fillStyle = "brown"
        ctx.fillRect(x, y, cellSize, cellSize)
    }

    function drawNothing(r, c) {
        [x, y] = getCoords(r, c)
        ctx.fillStyle = "black"
        ctx.fillRect(x, y, cellSize, cellSize)
    }

    function drawTank(r, c, d, p) {
        [x, y] = getCoords(r, c)

        if (p == 1) {
            ctx.fillStyle = "green"
        } else {
            ctx.fillStyle = "red"
        }

        console.log("draw tank", r, c, d, p)

        ctx.fillRect(x + cellSize * 0.2, y + cellSize * 0.2, cellSize * 0.6, cellSize * 0.6)

        switch (d) {
            case "up": {
                ctx.fillRect(x + cellSize * 0.4, y, cellSize * 0.2, cellSize * 0.2);
                break;
            }
            case "right": {
                ctx.fillRect(x + cellSize * 0.8, y + cellSize * 0.4, cellSize * 0.2, cellSize * 0.2);
                break;
            }
            case "down": {
                ctx.fillRect(x + cellSize * 0.4, y + cellSize * 0.8, cellSize * 0.2, cellSize * 0.2);
                break;
            }
            case "left": {
                ctx.fillRect(x, y + cellSize * 0.4, cellSize * 0.2, cellSize * 0.2);
                break;
            }
        }
    }

    function drawBullet(r, c, d) {
        [x, y] = getCoords(r, c)

        ctx.fillStyle = "#fff"
        ctx.fillRect(x + cellSize * 0.4, y + cellSize * 0.4, cellSize * 0.2, cellSize * 0.2)
    }


    function drawField() {
        for (i = 0; i < cellsVer; i++) {
            for (j = 0; j < cellsHor; j++) {
                switch (field[i][j]) {
                    case '#': {
                        drawWall(j, i)
                        break
                    }
                    case '.': {
                        drawNothing(j, i)
                        break
                    }
                }
            }
        }
        console.log("field")
    }

    function getRCD(line) {
        ans = line.split(" ")
        ans[0] = Number(ans[0])
        ans[1] = Number(ans[1])
        return ans
    }

    async function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms))
    }


    async function simulate() {
        __readLineIndexer = 0
        document.getElementById("status").innerText = "Играем..."

        for (turn = 0; ; turn++) {
            line = readLine()
            if (line.split(" ")[0] == "win") {
                document.getElementById("status").innerText = ["Зеленый", "Красный"][Number(line.split(" ")[1]) - 1] + " победил!"
                break
            }

            p1 = getRCD(readLine())
            p2 = getRCD(readLine())

            bulletsNum = Number(readLine())
            bullets = []

            for (i = 0; i < bulletsNum; i++) {
                bullets.push(getRCD(readLine()))
            }

            if (turn % 2 == 0) {
                continue
            }

            console.log("player1", p1)
            console.log("player2", p2)
            console.log("bullets", bullets)

            drawField()
            drawTank(p1[0], p1[1], p1[2], 1)
            drawTank(p2[0], p2[1], p2[2], 2)

            for (i = 0; i < bullets.length; i++) {
                drawBullet(bullets[i][0], bullets[i][1], bullets[i][2])
            }

            await sleep(500);
        }
    }

    var startButton = document.getElementById("start-button")
    startButton.addEventListener("click", simulate);
</script>