<div>
    <div class="precanvas-wrapper">
        <button type="button" id="start-button">Запуск!</button>
    </div>
    <div class="canvas-wrapper">
        <canvas id="canvas"></canvas>
    </div>
    <p id="status"></p>
</div>

<script type="text/javascript">
    // const gameLog = `{{ gameLog }}`.split('\n')
const gameLog =
`setup 7
.......
.#.#.#.
.......
.#####.
.......
.#.#.#.
.......
data 3
6 0 down
0 6 up
0
data 3
0 6 up
6 0 left
0
data 4
6 0 left
0 6 up
1
0 5 up
data 4
0 6 up
5 0 left
1
0 5 up
data 4
5 0 left
0 5 up
1
0 4 up
data 4
0 5 up
4 0 left
1
0 4 up
data 4
4 0 left
0 4 up
1
0 3 up
data 4
0 4 up
3 0 left
1
0 3 up
data 4
3 0 left
0 3 up
1
0 2 up
data 4
0 3 up
2 0 left
1
0 2 up
data 4
2 0 left
0 2 up
1
0 1 up
data 4
0 2 up
1 0 left
1
0 1 up
data 4
1 0 left
0 1 up
1
0 0 up
data 4
0 1 up
0 0 left
1
0 0 up
data 3
0 0 left
0 2 up
0
data 4
0 2 up
0 0 left
1
0 0 left
data 3
0 0 left
0 3 up
0
data 3
0 3 up
0 0 left
0
data 3
0 0 left
0 2 up
0
data 4
0 2 up
0 0 left
1
0 0 left
data 3
0 0 left
0 3 up
0
data 3
0 3 up
0 0 down
0
data 3
0 0 down
0 3 left
0
data 3
0 3 left
0 0 right
0
data 3
0 0 right
0 3 down
0
data 3
0 3 down
0 0 up
0
data 3
0 0 up
0 3 right
0
data 3
0 3 right
0 0 left
0
data 3
0 0 left
0 3 up
0
data 3
0 3 up
0 0 down
0
data 4
0 0 down
0 3 up
1
0 2 up
data 4
0 3 up
0 1 down
1
0 2 up
win 2
`.split('\n')

    __readLineIndexer = 0
    function readLine() {
        if (__readLineIndexer < gameLog.length) {
            return gameLog[__readLineIndexer++]
        }
        return ""
    }

    function parseLogs(logs) {
        __readLineIndexer = 0;
        var res = []
        var fld = []

        fldHeight = readLine().split(" ")[1]
        for (i = 0; i < fldHeight; i++) {
            fld.push(readLine())
        }

        for (turn = 0; ; turn++) {
            line = readLine()
            cmd = line.split(" ")

            if (cmd[0] == "win") {
                res.push({
                    type: "win",
                    who: cmd[1],
                })
            } else if (cmd[0] == "data") {
                p1 = getRCD(readLine())
                p2 = getRCD(readLine())

                if (turn % 2 == 1) {
                    p1, p2 = p2, p1
                }
    
                bulletsNum = Number(readLine())
                bullets = []
    
                for (i = 0; i < bulletsNum; i++) {
                    bullets.push(getRCD(readLine()))
                }

                res.push({
                    p: [p1, p2],
                    bullets: bullets,
                })
            }
        }

        return fld, res
    }

    var cnv = document.getElementById("canvas")
    var ctx = cnv.getContext("2d")

    var [field, moves] = parseLogs(gameLog)

    const cellsVer = file.length
    const cellsHor = field[0].length

    cnv.width = 400
    cnv.height = 400

    cnv.width += cellsHor - (cnv.width % cellsHor)
    cnv.height += cellsVer - (cnv.height % cellsVer)
    const cellSize = Math.floor(Math.min(cnv.width / cellsHor, cnv.height / cellsVer))

    images = {
        tank: [{
            "up": new Image(),
            "down": new Image(),
            "left": new Image(),
            "right": new Image(),
        }, {
            "up": new Image(),
            "down": new Image(),
            "left": new Image(),
            "right": new Image(),
        }],
    }

    // images.tank[0]["up"].src = "src/sprites/tank_power_up_c0_t1.png"
    // images.tank[0]["down"].src = "src/sprites/tank_power_down_c0_t1.png"
    // images.tank[0]["left"].src = "src/sprites/tank_power_left_c0_t1.png"
    // images.tank[0]["right"].src = "src/sprites/tank_power_right_c0_t1.png"
    // images.tank[1]["up"].src = "src/sprites/tank_power_up_c0_t1_f.png"
    // images.tank[1]["down"].src = "src/sprites/tank_power_down_c0_t1_f.png"
    // images.tank[1]["left"].src = "src/sprites/tank_power_left_c0_t1_f.png"
    // images.tank[1]["right"].src = "src/sprites/tank_power_right_c0_t1_f.png"

    // init
    ctx.fillStyle = "black"
    ctx.fillRect(0, 0, cnv.width, cnv.height)
    document.getElementById("status").innerText = ""

    function getCoords(r, c) {
        return [r * cellSize, c * cellSize]
    }

    function drawWall(r, c) {
        [x, y] = getCoords(r, c)
        ctx.fillStyle = "brown"
        ctx.fillRect(x, y, cellSize, cellSize)
    }

    function drawNothing(r, c) {
        [x, y] = getCoords(r, c)
        ctx.fillStyle = "black"
        ctx.fillRect(x, y, cellSize, cellSize)
    }

    function drawTank(obj, p) {
        [x, y] = getCoords(obj.r, obj.c)
        p -= 1

        console.log("draw tank", r, c, d, p)
        ctx.drawImage(images.tank[p][obj.d], x, y, cellSize, cellSize)

        // ctx.fillRect(x + cellSize * 0.2, y + cellSize * 0.2, cellSize * 0.6, cellSize * 0.6)

        switch (obj.d) {
            case "up": {
                // ctx.fillRect(x + cellSize * 0.4, y, cellSize * 0.2, cellSize * 0.2);
                break;
            }
            case "right": {
                // ctx.fillRect(x + cellSize * 0.8, y + cellSize * 0.4, cellSize * 0.2, cellSize * 0.2);
                break;
            }
            case "down": {
                // ctx.fillRect(x + cellSize * 0.4, y + cellSize * 0.8, cellSize * 0.2, cellSize * 0.2);
                break;
            }
            case "left": {
                // ctx.fillRect(x, y + cellSize * 0.4, cellSize * 0.2, cellSize * 0.2);
                break;
            }
        }
    }

    function drawBullet(obj) {
        [x, y] = getCoords(obj.r, obj.c)

        ctx.fillStyle = "#fff"
        ctx.fillRect(x + cellSize * 0.4, y + cellSize * 0.4, cellSize * 0.2, cellSize * 0.2)
    }


    function drawField() {
        for (i = 0; i < cellsVer; i++) {
            for (j = 0; j < cellsHor; j++) {
                switch (field[i][j]) {
                    case '#': {
                        drawWall(j, i)
                        break
                    }
                    case '.': {
                        drawNothing(j, i)
                        break
                    }
                }
            }
        }
        console.log("field")
    }

    function getRCD(line) {
        data = line.split(" ")
        res = {
            r: Number(data[0]),
            c: Number(data[1]),
            d: data[2],
        }
        return res
    }

    async function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms))
    }


    async function simulate() {
        __readLineIndexer = 0
        document.getElementById("status").innerText = "Играем..."

        for (turn = 0; ; turn++) {
            line = readLine()
            if (line.split(" ")[0] == "win") {
                document.getElementById("status").innerText = ["Зеленый", "Красный"][Number(line.split(" ")[1]) - 1] + " победил!"
                break
            }

            p1 = getRCD(readLine())
            p2 = getRCD(readLine())

            bulletsNum = Number(readLine())
            bullets = []

            for (i = 0; i < bulletsNum; i++) {
                bullets.push(getRCD(readLine()))
            }

            if (turn % 2 == 0) {
                continue
            }

            console.log("player1", p1)
            console.log("player2", p2)
            console.log("bullets", bullets)

            drawField()
            drawTank(p1[0], p1[1], p1[2], 1)
            drawTank(p2[0], p2[1], p2[2], 2)

            for (i = 0; i < bullets.length; i++) {
                drawBullet(bullets[i][0], bullets[i][1], bullets[i][2])
            }

            await sleep(500);
        }
    }

    var startButton = document.getElementById("start-button")
    startButton.addEventListener("click", simulate);
</script>